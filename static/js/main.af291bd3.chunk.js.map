{"version":3,"sources":["components/Table.js","components/InputNumber.js","components/GlobalStyle.js","components/Form.js","components/Button.js","components/Radio.js","components/Select.js","components/NewIncomeForm.js","components/App.js","index.js"],"names":["TableColumn","Table","Column","InputNumber","GlobalStyle","createGlobalStyle","_templateObject","FormField","styled","label","Form_templateObject","FiltersCol","div","_templateObject2","FiltersColContainer","_templateObject3","FiltersColTitle","h2","_templateObject4","Button","RadioGroup","Radio","Group","Option","Select","StyledNewIncomeForm","NewIncomeForm_templateObject","NewIncomeForm","_ref","freqs","years","onAdd","_useState","useState","_useState2","Object","slicedToArray","quantity","setQuantity","_useState3","_useState4","freq","setFreq","_useState5","_useState6","unit","setUnit","react_default","a","createElement","className","size","placeholder","value","onChange","precision","formatter","v","concat","parser","replace","step","min","max","e","target","radio_default","YEARLY","select_default","disabled","ONCE","showSearch","map","year","key","MONTHLY","onClick","App","Date","getFullYear","startingYear","setStartingYear","startingAge","setStartingAge","endAge","setEndAge","_useState7","_useState8","initialSalary","setInitialSalary","_useState9","_useState10","yearlySalaryIncrease","setYearlySalaryIncrease","_useState11","_useState12","incomeTaxes","setIncomeTaxes","_useState13","_useState14","monthlyExpenses","setMonthlyExpenses","_useState15","_useState16","yearlyExpensesIncrease","setYearlyExpensesIncrease","_useState17","_useState18","averageYearlyReturns","setAverageYearlyReturns","_useState19","_useState20","initialCapital","setInitialCapital","_useState21","_useState22","targetRetirementIncome","setTargetRetirementIncome","_useState23","_useState24","targetCapitalFraction","setTargetCapitalFraction","FREQ","BIWEEKLY","WEEKLY","_useState25","_useState26","incomes","setIncomes","getYears","start","end","push","_useState27","_useState28","setYears","useEffect","data","prevYearCapital","prevYearRetirementIncome","i","item","isRetired","test","reduce","acc","income","_FREQ$YEARLY$FREQ$MON","defineProperty","total","Math","pow","netIncome","expenses","savings","capital","returns","totalCapital","retirementIncome","generateData","components_GlobalStyle","components_NewIncomeForm","newIncome","console","log","toConsumableArray","JSON","stringify","table_default","dataSource","pagination","rowClassName","row","index","title","dataIndex","width","col","colProps","includes","render","react_currency_formatter_umd_default","currency","pattern","assign","align","ReactDOM","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.af291bd3.chunk.js","sourcesContent":["import Table from \"antd/lib/table\";\r\nimport \"antd/lib/table/style/css\";\r\n\r\nconst TableColumn = Table.Column;\r\n\r\nexport default Table;\r\nexport { Table, TableColumn };","import InputNumber from \"antd/lib/input-number\";\r\nimport \"antd/lib/input-number/style/css\";\r\n\r\nexport default InputNumber;","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    html, body, #root {\r\n        min-height: 100vh;\r\n        font-family: 'Roboto', sans-serif;\r\n    }\r\n\r\n    .row-success {\r\n        background-color: rgba(0, 200, 0, 0.1);\r\n    }\r\n\r\n    .ant-table-row {\r\n        td {\r\n            white-space: nowrap;\r\n        }\r\n    }\r\n`\r\n\r\nexport default GlobalStyle;","import styled from \"styled-components\";\r\n\r\nconst FormField = styled.label`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: start;\r\n    align-items: center;\r\n    margin: 5px 0;\r\n\r\n    > span {\r\n        display: inline-block;\r\n        margin-right: 20px;\r\n        text-align: right;\r\n        flex-basis: 60%;\r\n\r\n        :after {\r\n            content: \" :\";\r\n        }\r\n    }\r\n`\r\n\r\nconst FiltersCol = styled.div`\r\n    padding: 5px;\r\n    flex: 1 1 auto;\r\n`\r\n\r\nconst FiltersColContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n`\r\n\r\nconst FiltersColTitle = styled.h2`\r\n    text-align: center;\r\n`\r\n\r\nexport { FormField, FiltersCol, FiltersColContainer, FiltersColTitle };","import Button from \"antd/lib/button\"\r\nimport \"antd/lib/button/style/css\"\r\n\r\nexport default Button;","import React from \"react\";\r\nimport Radio from \"antd/lib/radio\"\r\nimport \"antd/lib/radio/style/css\"\r\n\r\nconst RadioGroup = Radio.Group;\r\n\r\nconst RadioBlock = ({ style = {}, children, ...rest }) => {\r\n    const radioStyle = {\r\n        display: \"block\",\r\n        height: \"30px\",\r\n        lineHeight: \"30px\",\r\n        ...style\r\n    };\r\n\r\n    return (\r\n        <Radio style={radioStyle} {...rest}>\r\n            {children}\r\n        </Radio>\r\n    )\r\n}\r\n\r\nexport default Radio;\r\nexport { Radio, RadioBlock, RadioGroup };","import Select from \"antd/lib/select\"\r\nimport \"antd/lib/select/style/css\"\r\n\r\nconst Option = Select.Option;\r\n\r\nexport default Select;\r\nexport { Select, Option };","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Button from \"./Button\";\r\nimport { Radio, RadioGroup } from \"./Radio\";\r\nimport { Select, Option } from \"./Select\"\r\nimport InputNumber from \"./InputNumber\"\r\n\r\nconst StyledNewIncomeForm = styled.div`\r\n\r\n    .interval {\r\n        display: flex;\r\n        flex-direction: row;\r\n        margin-bottom: 20px;\r\n        \r\n        .quantity {\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: center;\r\n            align-items: center;\r\n            margin-right: 10px;\r\n        }\r\n\r\n        .frequency {\r\n            flex: 1 1 auto;\r\n\r\n            .freq-once {\r\n                display: flex;\r\n                flex-direction: row;\r\n                margin-bottom: 20px;\r\n\r\n                .ant-select {\r\n                    width: 120px;\r\n                }\r\n            }\r\n\r\n            .freq-every {\r\n                display: flex;\r\n                flex-direction: row;\r\n\r\n                .ant-select {\r\n                    width: 80px;\r\n                }\r\n            }\r\n        }\r\n        \r\n    }\r\n`\r\n\r\nconst NewIncomeForm = ({ freqs, years, onAdd }) => {\r\n\r\n    const units = {\r\n        year: \"year\"\r\n    }\r\n\r\n    const [quantity, setQuantity] = useState(1000)\r\n    const [freq, setFreq] = useState(1)\r\n    const [unit, setUnit] = useState(units.year)\r\n\r\n    const add = () => {\r\n        onAdd({\r\n            quantity,\r\n            freq,\r\n            unit,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <StyledNewIncomeForm>\r\n\r\n            <div className=\"interval\">\r\n                <div className=\"quantity\">\r\n                    Receive\r\n                    <InputNumber\r\n                        size=\"small\"\r\n                        placeholder=\"Quantity\"\r\n                        value={quantity}\r\n                        onChange={setQuantity}\r\n                        precision={0}\r\n                        formatter={v => v ? `${v}$` : v}\r\n                        parser={value => value.replace('$', '')}\r\n                        step={100}\r\n                        min={0}\r\n                        max={999999999}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"frequency\">\r\n                    <RadioGroup value={freq} onChange={e => setFreq(e.target.value)}>\r\n                        <div className=\"freq-once\">\r\n                            <Radio value={freqs.YEARLY}>Once</Radio>\r\n                            <Select disabled={freq !== freqs.ONCE} showSearch placeholder=\"Select a year\" size=\"small\">\r\n                                {years.map(year => (\r\n                                    <Option key={year} value={year}>{year}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </div>\r\n\r\n                        <div className=\"freq-every\">\r\n                            <Radio value={freqs.MONTHLY}>Every</Radio>\r\n                            {/* <span style={{ margin: \"0 5px\", display: \"inline-block\" }}>per</span> */}\r\n\r\n\r\n                            <InputNumber size=\"small\" value={freq} onChange={setFreq} />\r\n\r\n                            <Select showSearch size=\"small\" value={unit} onChange={v => setUnit(v)}>\r\n                                <Option value=\"year\">year</Option>\r\n                                <Option value=\"month\">month</Option>\r\n                                <Option value=\"week\">week</Option>\r\n                                <Option value=\"day\">day</Option>\r\n                            </Select>\r\n                        </div>\r\n                    </RadioGroup>\r\n                </div>\r\n            </div>\r\n\r\n            <Button onClick={add}>Add Income</Button>\r\n        </StyledNewIncomeForm>\r\n    )\r\n}\r\n\r\nexport default NewIncomeForm;","import React, { useState, useEffect } from \"react\";\nimport Currency from \"react-currency-formatter\";\n\nimport { Table, TableColumn } from \"./Table\";\nimport InputNumber from \"./InputNumber\";\nimport GlobalStyle from \"./GlobalStyle\";\nimport { FormField, FiltersCol, FiltersColContainer, FiltersColTitle } from \"./Form\";\nimport NewIncomeForm from \"./NewIncomeForm\";\n\nconst App = () => {\n    const columns = [\n        { title: \"Year\", dataIndex: \"year\", key: \"year\", width: 60 },\n        { title: \"Age\", dataIndex: \"startingAge\", key: \"startingAge\", width: 60 },\n        { title: \"Income\", dataIndex: \"income\", key: \"income\" },\n        { title: \"Net Income\", dataIndex: \"netIncome\", key: \"netIncome\" },\n        { title: \"Expenses\", dataIndex: \"expenses\", key: \"expenses\" },\n        { title: \"Savings\", dataIndex: \"savings\", key: \"savings\" },\n        { title: \"Net Capital\", dataIndex: \"capital\", key: \"capital\" },\n        { title: \"Returns\", dataIndex: \"returns\", key: \"returns\" },\n        { title: \"Total Capital\", dataIndex: \"totalCapital\", key: \"totalCapital\" },\n        { title: \"Retirement Withdrawal\", dataIndex: \"retirementIncome\", key: \"retirementIncome\" },\n\n\n        { title: \"testcol\", dataIndex: \"test\", key: \"test\" },\n    ];\n\n    const [startingYear, setStartingYear] = useState((new Date()).getFullYear());\n    const [startingAge, setStartingAge] = useState(30);\n    const [endAge, setEndAge] = useState(75);\n    const [initialSalary, setInitialSalary] = useState(40000);\n    const [yearlySalaryIncrease, setYearlySalaryIncrease] = useState(0);\n    const [incomeTaxes, setIncomeTaxes] = useState(30);\n    const [monthlyExpenses, setMonthlyExpenses] = useState(2000);\n    const [yearlyExpensesIncrease, setYearlyExpensesIncrease] = useState(0);\n    const [averageYearlyReturns, setAverageYearlyReturns] = useState(6);\n    const [initialCapital, setInitialCapital] = useState(0);\n    const [targetRetirementIncome, setTargetRetirementIncome] = useState(30000);\n    const [targetCapitalFraction, setTargetCapitalFraction] = useState(4);\n\n    const FREQ = {\n        YEARLY: \"yearly\",\n        MONTHLY: \"monthly\",\n        BIWEEKLY: \"biweekly\",\n        WEEKLY: \"weekly\",\n        ONCE: \"once\"\n    };\n\n    const [incomes, setIncomes] = useState([\n        // {value: 100, freq: FREQ.MONTHLY}\n    ]);\n\n    const getYears = (start, end) => {\n        const years = [];\n        for (let year = start; year <= end; year++) {\n            years.push(year);\n        }\n        return years;\n    }\n\n    const [years, setYears] = useState(getYears(startingYear, startingYear + endAge - startingAge));\n\n    useEffect(() => {\n        setYears(getYears(startingYear, startingYear + endAge - startingAge));\n    }, [startingYear, endAge])\n\n    const generateData = () => {\n        let prevYearCapital = initialCapital;\n        let prevYearRetirementIncome = prevYearCapital * (targetCapitalFraction / 100);\n\n        return years.map((year, i) => {\n            const item = {\n                key: year,\n                year,\n                startingAge: startingAge + i,\n            };\n\n            const isRetired = prevYearRetirementIncome >= targetRetirementIncome;\n\n            item.test = incomes.reduce((acc, income) => {\n                return {\n                    [FREQ.YEARLY]: (total, value) => total + value,\n                    [FREQ.MONTHLY]: (total, value) => total + value * 12,\n                    [FREQ.BIWEEKLY]: (total, value) => total + value * 26,\n                    [FREQ.WEEKLY]: (total, value) => total + value * 52,\n                    [FREQ.ONCE]: (total, value) => total + value,\n                }[income.freq](acc, income.value);\n            }, 0);\n\n\n            item.income = isRetired\n                ? 0\n                : Math.pow(1 + yearlySalaryIncrease / 100, i) * initialSalary;\n\n            item.netIncome = isRetired\n                ? prevYearRetirementIncome\n                : item.income * (1 - incomeTaxes / 100);\n\n            item.expenses = Math.pow(1 + yearlyExpensesIncrease / 100, i) * monthlyExpenses * 12;\n\n            item.savings = item.netIncome - item.expenses;\n\n            item.capital = isRetired\n                ? prevYearCapital - prevYearRetirementIncome + item.savings\n                : prevYearCapital + item.savings;\n\n            item.returns = item.capital * (averageYearlyReturns / 100);\n            item.totalCapital = item.capital + item.returns;\n            item.retirementIncome = item.totalCapital * (targetCapitalFraction / 100);\n\n            prevYearCapital = item.totalCapital;\n            prevYearRetirementIncome = item.retirementIncome;\n\n            return item;\n        });\n    }\n\n    const addIncome = newIncome => {\n        console.log(newIncome)\n        setIncomes([...incomes, newIncome]);\n    }\n\n    const data = generateData();\n\n    return (\n        <div>\n            <GlobalStyle />\n\n            <FiltersColContainer>\n                <FiltersCol>\n                    <FiltersColTitle>Misc</FiltersColTitle>\n\n                    <FormField>\n                        <span>Starting Year</span>\n                        <InputNumber\n                            size=\"small\"\n                            value={startingYear}\n                            onChange={setStartingYear}\n                        />\n                    </FormField>\n\n                    <FormField>\n                        <span>Starting Age</span>\n                        <InputNumber\n                            size=\"small\"\n                            value={startingAge}\n                            onChange={setStartingAge}\n                        />\n                    </FormField>\n\n                    <FormField>\n                        <span>End Age</span>\n                        <InputNumber\n                            size=\"small\"\n                            value={endAge}\n                            onChange={setEndAge}\n                            min={18}\n                            max={120}\n                        />\n                    </FormField>\n\n                    <FormField>\n                        <span>Starting Capital ($)</span>\n                        <InputNumber\n                            size=\"small\"\n                            value={initialCapital}\n                            onChange={setInitialCapital}\n                            precision={0}\n                            step={1000}\n                            min={0}\n                            max={999999999}\n                        />\n                    </FormField>\n\n                    <FormField>\n                        <span>Target Retirement Withdrawal (%)</span>\n                        <InputNumber\n                            size=\"small\"\n                            value={targetCapitalFraction}\n                            onChange={setTargetCapitalFraction}\n                            formatter={v => `${v}%`}\n                            parser={value => value.replace('%', '')}\n                            precision={2}\n                            step={0.25}\n                            min={0}\n                            max={10}\n                        />\n                    </FormField>\n\n                    <FormField>\n                        <span>Target Retirement Income ($)</span>\n                        <InputNumber\n                            size=\"small\"\n                            value={targetRetirementIncome}\n                            onChange={setTargetRetirementIncome}\n                            precision={0}\n                            step={1000}\n                            min={0}\n                            max={999999999}\n                        />\n                    </FormField>\n                </FiltersCol>\n\n                <FiltersCol>\n                    <FiltersColTitle>Income</FiltersColTitle>\n\n                    <FormField>\n                        <span>Salary ($)</span>\n                        <InputNumber\n                            size=\"small\"\n                            value={initialSalary}\n                            onChange={setInitialSalary}\n                            precision={0}\n                            step={1000}\n                            min={0}\n                            max={999999999}\n                        />\n                    </FormField>\n\n                    <FormField>\n                        <span>Yearly Salary Increase (%)</span>\n                        <InputNumber\n                            size=\"small\"\n                            value={yearlySalaryIncrease}\n                            onChange={setYearlySalaryIncrease}\n                            precision={2}\n                            formatter={v => `${v}%`}\n                            parser={value => value.replace('%', '')}\n                            step={0.5}\n                            min={0}\n                            max={10}\n                        />\n                    </FormField>\n\n                    <FormField>\n                        <span>Average Yearly Returns (%)</span>\n                        <InputNumber\n                            size=\"small\"\n                            value={averageYearlyReturns}\n                            onChange={setAverageYearlyReturns}\n                            precision={1}\n                            formatter={v => `${v}%`}\n                            parser={value => value.replace('%', '')}\n                            step={0.5}\n                            min={0}\n                            max={100}\n                        />\n                    </FormField>\n\n                    <hr />\n\n                    <NewIncomeForm freqs={FREQ} years={years} onAdd={addIncome} />\n\n                    <pre>\n                        {JSON.stringify(incomes, null, 4)}\n                    </pre>\n                </FiltersCol>\n\n                <FiltersCol>\n                    <FiltersColTitle>Expenses</FiltersColTitle>\n\n                    <FormField>\n                        <span>Income Taxes (%)</span>\n                        <InputNumber\n                            value={incomeTaxes}\n                            onChange={setIncomeTaxes}\n                            precision={1}\n                            formatter={v => `${v}%`}\n                            parser={value => value.replace('%', '')}\n                            step={0.5}\n                            min={0}\n                            max={100}\n                        />\n                    </FormField>\n\n                    <FormField>\n                        <span>Monthly Expenses ($)</span>\n                        <InputNumber\n                            value={monthlyExpenses}\n                            onChange={setMonthlyExpenses}\n                            precision={0}\n                            formatter={v => `${v}$`}\n                            parser={value => value.replace('$', '')}\n                            step={100}\n                            min={0}\n                            max={100000}\n                        />\n                    </FormField>\n\n                    <FormField>\n                        <span>Yearly Expenses Increase (%)</span>\n                        <InputNumber\n                            value={yearlyExpensesIncrease}\n                            onChange={setYearlyExpensesIncrease}\n                            precision={1}\n                            formatter={v => `${v}%`}\n                            parser={value => value.replace('%', '')}\n                            step={0.5}\n                            min={0}\n                            max={100}\n                        />\n                    </FormField>\n                </FiltersCol>\n            </FiltersColContainer>\n\n            <Table\n                dataSource={data}\n                size=\"small\"\n                pagination={false}\n                rowClassName={(row, index) => {\n                    return row.retirementIncome >= targetRetirementIncome ? \"row-success\" : \"\"\n                }}\n            >\n                {columns.map(col => {\n                    const colProps = {};\n                    if (![\"year\", \"startingAge\", \"empty\", \"capitalFraction\"].includes(col.dataIndex)) {\n                        colProps.render = v => (\n                            <Currency quantity={v} currency=\"CAD\" pattern=\"###,### !\" />\n                        );\n                    }\n\n                    return (\n                        <TableColumn\n                            align=\"right\"\n                            key={col.key}\n                            dataIndex={col.dataIndex}\n                            title={col.title}\n                            width={col.width}\n                            {...colProps}\n                        />\n                    )\n                })}\n            </Table>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"normalize.css\";\n\nimport App from \"./components/App\";\n\nReactDOM.render(\n    <App />\n    , document.getElementById(\"root\")\n);"],"sourceRoot":""}