{"version":3,"sources":["values/FrequencyScope.ts","values/RecurrenceUntilType.ts","values/RecurrenceStartingType.ts","components/SimpleTable/SimpleTable.tsx","components/CashFlowTable/CashFlowTable.tsx","components/EditCashFlowDialog/EditCashFlowDialog.tsx","utils.ts","components/FiltersBar/FiltersBar.tsx","components/App/App.tsx","components/Input/Input.tsx","index.tsx"],"names":["FrequencyScope","RecurrenceUntilType","RecurrenceStartingType","SimpleTable","children","className","rest","CashFlowTable","items","onEdit","onDelete","map","cashFlow","key","id","name","quantity","amount","currency","pattern","recurring","recurringOptions","frequency","frequencyScope","startingType","startingValue","untilType","untilValue","freq","freqScope","starting","Now","Goal","Age","Year","until","Forever","fixedYear","getFrequencyDescription","Stack","isInline","IconButton","size","aria-label","icon","onClick","getDefaultStartingTypeValue","type","Date","getFullYear","EditCashFlowDialog","title","onCancel","onSave","useState","setName","setAmount","setRecurring","year","setYear","setFrequency","setFrequencyScope","setUntilType","setUntilValue","setStartingType","setStartingValue","handleUntilTypeChange","e","currentTarget","value","handleStartingTypeChange","newType","handleStartingValueChange","getFrequencyScopeLabel","plural","parseInt","slice","toUpperCase","Modal","minWidth","Heading","textAlign","FormControl","isRequired","alignItems","FormLabel","flex","Input","isFullWidth","onChange","autoFocus","marginTop","InputGroup","Radio","isChecked","fontWeight","marginRight","Text","alignSelf","color","undefined","isDisabled","flexBasis","marginBottom","Select","Day","Week","Month","marginY","paddingY","borderY","flexShrink","Button","hasName","hasAmount","hasYear","hasFrequency","isUntilYear","updatedCashFlow","variantColor","removeFromList","list","item","index","indexOf","getDefaultAge","val","getDefaultInitialCapital","getDefaultAvgYearlyReturns","getDefaultWithdrawalRate","getDefaultRetirementIncomeTarget","getDefaultIncomes","getDefaultSpendings","getDefaultSettings","filters","localStorage","getItem","JSON","parse","getFromLocalStorage","startingYear","age","initialCapital","avgYearlyReturns","withdrawalRate","retirementIncomeTarget","incomes","spendings","FiltersBar","defaultValues","useDisclosure","isOpen","onOpen","onClose","dialogTitle","setDialogTitle","activeCashFlow","setActiveCashFlow","setStartingYear","setAge","setInitialCapital","setAvgYearlyReturns","setRetirementIncomeTarget","setWithdrawalRate","income","uuidv4","setIncomes","spending","setSpendings","updateCashFlow","target","findIndex","newCashFlows","useEffect","closeOnOverlayClick","spacing","Panel","direction","label","htmlFor","NumberInput","min","max","defaultValue","precision","step","rightElement","columns","getData","row","col","condition","startOfYearCapital","retirementWithdrawal","cellHeaderClasses","cellClasses","savings","returns","totalCapital","App","rows","setRows","setFilters","calculateCashFlow","cashFlows","goalReached","total","forEach","started","expired","onFiltersChange","useCallback","console","log","i","totalCapitalBeforeReturns","push","setItem","stringify","ThemeProvider","theme","CSSReset","join","split","letters","setValue","Icon","desc","justifyContent","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.758c3bba.chunk.js","sourcesContent":["export enum FrequencyScope {\r\n    Day = \"day\",\r\n    Week = \"week\",\r\n    Month = \"month\",\r\n    Year = \"year\",\r\n}","export enum RecurrenceUntilType {\r\n    Forever = \"forever\",\r\n    Goal = \"goal\",\r\n    Age = \"age\",\r\n    Year = \"year\",\r\n}","export enum RecurrenceStartingType {\r\n    Now = \"now\",\r\n    Goal = \"goal\",\r\n    Age = \"age\",\r\n    Year = \"year\",\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./SimpleTable.scss\";\r\n\r\nexport interface SimpleTableProps {\r\n    className?: string;\r\n}\r\n\r\nexport const SimpleTable: React.FC<SimpleTableProps> = ({ children, className = \"\", ...rest }) => {\r\n    return (\r\n        <table className={\"simple-table \" + className} {...rest}>\r\n            {children}\r\n        </table>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport Currency from \"react-currency-formatter\";\r\nimport { IconButton, Stack } from \"@chakra-ui/core\";\r\n\r\nimport { CashFlow } from \"models\";\r\nimport { SimpleTable } from \"components\";\r\nimport { RecurrenceStartingType, RecurrenceUntilType } from \"values\";\r\n\r\nexport interface CashFlowTableProps {\r\n    items: CashFlow[];\r\n    onEdit?: (cashFlow: CashFlow) => void;\r\n    onDelete?: (cashFlow: CashFlow) => void;\r\n}\r\n\r\nexport const CashFlowTable: React.FC<CashFlowTableProps> = ({\r\n    items = [],\r\n    onEdit = () => undefined,\r\n    onDelete = () => undefined,\r\n}) => {\r\n    const getFrequencyDescription = (cashFlow: CashFlow): string => {\r\n        if (cashFlow.recurring) {\r\n            const {\r\n                frequency,\r\n                frequencyScope,\r\n                startingType,\r\n                startingValue,\r\n                untilType,\r\n                untilValue,\r\n            } = cashFlow.recurringOptions!;\r\n            const freq = frequency > 1 ? `${frequency} ` : \"\";\r\n            const freqScope = frequencyScope + (frequency > 1 ? \"s\" : \"\");\r\n\r\n            const starting =\r\n                {\r\n                    [RecurrenceStartingType.Now]: \"now\",\r\n                    [RecurrenceStartingType.Goal]: \"when goal is reached\",\r\n                    [RecurrenceStartingType.Age]: `at age ${startingValue}`,\r\n                    [RecurrenceStartingType.Year]: `in year ${startingValue}`,\r\n                }[startingType] || \"\";\r\n\r\n            const until =\r\n                {\r\n                    [RecurrenceUntilType.Forever]: \"\",\r\n                    [RecurrenceUntilType.Goal]: \" until goal reached\",\r\n                    [RecurrenceUntilType.Age]: ` until age ${untilValue}`,\r\n                    [RecurrenceUntilType.Year]: ` until ${untilValue}`,\r\n                }[untilType] || \"\";\r\n\r\n            return `Every ${freq}${freqScope} starting ${starting}${until}`;\r\n        } else {\r\n            return `Once in ${cashFlow.fixedYear}`;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <SimpleTable>\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Amount</th>\r\n                    <th>Frequency</th>\r\n                    <th></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {items.map((cashFlow) => {\r\n                    return (\r\n                        <tr key={cashFlow.id}>\r\n                            <td>{cashFlow.name}</td>\r\n                            <td>\r\n                                <Currency quantity={cashFlow.amount} currency=\"CAD\" pattern=\"###,### !\" />\r\n                            </td>\r\n                            <td>{getFrequencyDescription(cashFlow)}</td>\r\n                            <td>\r\n                                <Stack isInline>\r\n                                    <IconButton\r\n                                        size=\"sm\"\r\n                                        aria-label=\"Edit\"\r\n                                        icon=\"edit\"\r\n                                        onClick={() => onEdit(cashFlow)}\r\n                                    />\r\n                                    <IconButton\r\n                                        size=\"sm\"\r\n                                        aria-label=\"Delete\"\r\n                                        icon=\"delete\"\r\n                                        onClick={() => onDelete(cashFlow)}\r\n                                    />\r\n                                </Stack>\r\n                            </td>\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </SimpleTable>\r\n    );\r\n};\r\n\r\nexport default CashFlowTable;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n    Text,\r\n    Radio,\r\n    Button,\r\n    Heading,\r\n    InputGroup,\r\n    InputRightElement,\r\n    FormControl,\r\n    FormLabel,\r\n    Select,\r\n    Input,\r\n    Stack,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n} from \"@chakra-ui/core\";\r\n\r\nimport { RecurrenceUntilType, RecurrenceStartingType, FrequencyScope } from \"values\";\r\nimport { CashFlow } from \"models\";\r\n\r\nimport \"./EditCashFlowDialog.scss\";\r\n\r\ninterface EditCashFlowDialogProps {\r\n    title: string;\r\n    cashFlow?: CashFlow;\r\n    onCancel: () => void;\r\n    onSave: (cashFlow: CashFlow) => void;\r\n}\r\n\r\nconst getDefaultStartingTypeValue = (type: RecurrenceStartingType): string => {\r\n    if (type === RecurrenceStartingType.Year) {\r\n        return `${new Date().getFullYear()}`;\r\n    }\r\n    return \"\";\r\n};\r\n\r\nexport const EditCashFlowDialog: React.FC<EditCashFlowDialogProps> = ({ title, cashFlow, onCancel, onSave }) => {\r\n    const [name, setName] = useState<string>(cashFlow?.name || \"\");\r\n    const [amount, setAmount] = useState<string>(cashFlow?.amount != null ? `${cashFlow?.amount}` : \"\");\r\n    const [recurring, setRecurring] = useState<boolean>(cashFlow?.recurring || false);\r\n    const [year, setYear] = useState<string>(`${cashFlow?.fixedYear || new Date().getFullYear()}`);\r\n    const [frequency, setFrequency] = useState<string>(\r\n        cashFlow?.recurringOptions?.frequency != null ? `${cashFlow.recurringOptions?.frequency}` : \"1\"\r\n    );\r\n    const [frequencyScope, setFrequencyScope] = useState<string>(\r\n        cashFlow?.recurringOptions?.frequencyScope || FrequencyScope.Year\r\n    );\r\n    const [untilType, setUntilType] = useState<string>(\r\n        cashFlow?.recurringOptions?.untilType || RecurrenceUntilType.Forever\r\n    );\r\n    const [untilValue, setUntilValue] = useState<string>(\r\n        `${cashFlow?.recurringOptions?.untilValue || new Date().getFullYear()}`\r\n    );\r\n    const [startingType, setStartingType] = useState<string>(\r\n        cashFlow?.recurringOptions?.startingType || RecurrenceStartingType.Now\r\n    );\r\n    const [startingValue, setStartingValue] = useState<string>(() => {\r\n        if (cashFlow?.recurringOptions?.startingValue) {\r\n            return `${cashFlow?.recurringOptions?.startingValue}`;\r\n        }\r\n\r\n        return getDefaultStartingTypeValue(startingType as RecurrenceStartingType);\r\n    });\r\n\r\n    const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => setName(e.currentTarget.value);\r\n    const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => setAmount(e.currentTarget.value);\r\n    const handleYearChange = (e: React.ChangeEvent<HTMLInputElement>) => setYear(e.currentTarget.value);\r\n    const handleUntilYearChange = (e: React.ChangeEvent<HTMLInputElement>) => setUntilValue(e.currentTarget.value);\r\n    const handleFrequencyChange = (e: React.ChangeEvent<HTMLInputElement>) => setFrequency(e.currentTarget.value);\r\n    const handleUntilTypeChange = (e: React.ChangeEvent<HTMLInputElement>) => setUntilType(e.currentTarget.value);\r\n    const handleFrequencyScopeChange = (e: React.ChangeEvent<HTMLSelectElement>) =>\r\n        setFrequencyScope(e.currentTarget.value);\r\n    const handleStartingTypeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newType = e.currentTarget.value;\r\n        const value = getDefaultStartingTypeValue(newType as RecurrenceStartingType);\r\n        setStartingValue(value);\r\n        setStartingType(newType);\r\n    };\r\n    const handleStartingValueChange = (e: React.ChangeEvent<HTMLInputElement>) =>\r\n        setStartingValue(e.currentTarget.value);\r\n\r\n    const handleSave = () => {\r\n        const hasName = name !== \"\";\r\n        const hasAmount = amount !== \"\";\r\n        const hasYear = year !== \"\";\r\n        const hasFrequency = frequency !== \"\";\r\n        const isUntilYear = untilType === RecurrenceUntilType.Year;\r\n        const hasUntilYear = untilValue !== \"\";\r\n\r\n        // Needed in all recurrence types\r\n        if (!hasName || !hasAmount || !hasYear) {\r\n            return;\r\n        }\r\n\r\n        // Needed for Recurring\r\n        if (recurring && !hasFrequency && !(isUntilYear && !hasUntilYear)) {\r\n            return;\r\n        }\r\n\r\n        let updatedCashFlow: CashFlow = {\r\n            ...cashFlow,\r\n            name,\r\n            amount: parseInt(amount),\r\n            recurring,\r\n        };\r\n\r\n        if (recurring) {\r\n            updatedCashFlow.recurringOptions = {\r\n                frequency: parseInt(frequency),\r\n                frequencyScope: frequencyScope as FrequencyScope,\r\n                untilType: untilType as RecurrenceUntilType,\r\n                untilValue: parseInt(untilValue),\r\n                startingType: startingType as RecurrenceStartingType,\r\n                startingValue: parseInt(startingValue),\r\n            };\r\n        } else {\r\n            updatedCashFlow.fixedYear = parseInt(year);\r\n        }\r\n\r\n        onSave(updatedCashFlow);\r\n    };\r\n\r\n    const getFrequencyScopeLabel = (freqScope: FrequencyScope) => {\r\n        const plural = parseInt(frequency) > 1 ? \"s\" : \"\";\r\n        return `${freqScope.slice(0, 1).toUpperCase()}${freqScope.slice(1)}${plural}`;\r\n    };\r\n\r\n    return (\r\n        <ModalContent minWidth=\"550px\">\r\n            <ModalHeader>\r\n                <Heading size=\"lg\" textAlign=\"center\">\r\n                    {title}\r\n                </Heading>\r\n            </ModalHeader>\r\n\r\n            <ModalCloseButton />\r\n\r\n            <ModalBody>\r\n                <FormControl isRequired>\r\n                    <Stack isInline alignItems=\"center\">\r\n                        <FormLabel flex=\"0 0 120px\">Description</FormLabel>\r\n                        <Input type=\"text\" isRequired isFullWidth value={name} onChange={handleNameChange} autoFocus />\r\n                    </Stack>\r\n                </FormControl>\r\n\r\n                <FormControl isRequired marginTop=\"15px\">\r\n                    <Stack isInline alignItems=\"center\">\r\n                        <FormLabel flex=\"0 0 120px\">Amount</FormLabel>\r\n                        <InputGroup flex=\"1\">\r\n                            <Input type=\"number\" isFullWidth isRequired value={amount} onChange={handleAmountChange} />\r\n                            <InputRightElement children=\"$\" />\r\n                        </InputGroup>\r\n                    </Stack>\r\n                </FormControl>\r\n\r\n                <FormControl isRequired marginTop=\"15px\">\r\n                    <FormLabel>Recurrence</FormLabel>\r\n\r\n                    <Stack isInline marginTop=\"0px\" className={\"recurrence-type\" + (!recurring ? \" selected\" : \"\")}>\r\n                        <Radio\r\n                            isChecked={!recurring}\r\n                            onChange={() => setRecurring(false)}\r\n                            fontWeight=\"semibold\"\r\n                            flex=\"0 0 120px\"\r\n                            marginRight={0}\r\n                        >\r\n                            One time\r\n                        </Radio>\r\n\r\n                        <Text alignSelf=\"center\" flex=\"0 0 70px\" color={recurring ? \"gray.300\" : undefined}>\r\n                            in year\r\n                        </Text>\r\n\r\n                        <Input\r\n                            type=\"number\"\r\n                            value={year}\r\n                            isDisabled={recurring}\r\n                            onChange={handleYearChange}\r\n                            flexBasis=\"auto\"\r\n                        />\r\n                    </Stack>\r\n\r\n                    <Stack isInline marginTop=\"15px\" className={\"recurrence-type\" + (recurring ? \" selected\" : \"\")}>\r\n                        <Radio\r\n                            isChecked={recurring}\r\n                            onChange={() => setRecurring(true)}\r\n                            fontWeight=\"semibold\"\r\n                            flex=\"0 0 120px\"\r\n                            marginRight={0}\r\n                        >\r\n                            Recurring\r\n                        </Radio>\r\n\r\n                        <Stack>\r\n                            <Stack isInline marginBottom=\"1em\">\r\n                                <Text alignSelf=\"center\" flex=\"0 0 80px\" color={!recurring ? \"gray.300\" : undefined}>\r\n                                    every\r\n                                </Text>\r\n\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    value={frequency}\r\n                                    isDisabled={!recurring}\r\n                                    onChange={handleFrequencyChange}\r\n                                    flexBasis=\"35%\"\r\n                                />\r\n\r\n                                <Select\r\n                                    value={frequencyScope}\r\n                                    onChange={handleFrequencyScopeChange}\r\n                                    isDisabled={!recurring}\r\n                                    flexBasis=\"65%\"\r\n                                >\r\n                                    <option value={FrequencyScope.Day}>\r\n                                        {getFrequencyScopeLabel(FrequencyScope.Day)}\r\n                                    </option>\r\n                                    <option value={FrequencyScope.Week}>\r\n                                        {getFrequencyScopeLabel(FrequencyScope.Week)}\r\n                                    </option>\r\n                                    <option value={FrequencyScope.Month}>\r\n                                        {getFrequencyScopeLabel(FrequencyScope.Month)}\r\n                                    </option>\r\n                                    <option value={FrequencyScope.Year}>\r\n                                        {getFrequencyScopeLabel(FrequencyScope.Year)}\r\n                                    </option>\r\n                                </Select>\r\n                            </Stack>\r\n\r\n                            <Stack isInline marginY=\"1em\" paddingY=\"1em\" borderY=\"1px solid #efefef\">\r\n                                <Text alignSelf=\"center\" flex=\"0 0 80px\" color={!recurring ? \"gray.300\" : undefined}>\r\n                                    starting\r\n                                </Text>\r\n\r\n                                <Stack>\r\n                                    <Radio\r\n                                        isChecked={startingType === RecurrenceStartingType.Now}\r\n                                        value={RecurrenceStartingType.Now}\r\n                                        onChange={handleStartingTypeChange}\r\n                                        isDisabled={!recurring}\r\n                                    >\r\n                                        now\r\n                                    </Radio>\r\n\r\n                                    <Radio\r\n                                        isChecked={startingType === RecurrenceStartingType.Goal}\r\n                                        value={RecurrenceStartingType.Goal}\r\n                                        onChange={handleStartingTypeChange}\r\n                                        isDisabled={!recurring}\r\n                                    >\r\n                                        when goal reached\r\n                                    </Radio>\r\n\r\n                                    <Stack isInline>\r\n                                        <Radio\r\n                                            isChecked={startingType === RecurrenceStartingType.Age}\r\n                                            value={RecurrenceStartingType.Age}\r\n                                            onChange={handleStartingTypeChange}\r\n                                            isDisabled={!recurring}\r\n                                            flexShrink={0}\r\n                                            flexBasis=\"35%\"\r\n                                        >\r\n                                            at age\r\n                                        </Radio>\r\n\r\n                                        <Input\r\n                                            type=\"number\"\r\n                                            size=\"sm\"\r\n                                            flexBasis=\"65%\"\r\n                                            value={startingType === RecurrenceStartingType.Age ? startingValue : \"\"}\r\n                                            onChange={handleStartingValueChange}\r\n                                            isDisabled={!recurring || startingType !== RecurrenceStartingType.Age}\r\n                                        />\r\n                                    </Stack>\r\n\r\n                                    <Stack isInline>\r\n                                        <Radio\r\n                                            isChecked={startingType === RecurrenceStartingType.Year}\r\n                                            value={RecurrenceStartingType.Year}\r\n                                            onChange={handleStartingTypeChange}\r\n                                            isDisabled={!recurring}\r\n                                            flexShrink={0}\r\n                                            flexBasis=\"35%\"\r\n                                        >\r\n                                            year\r\n                                        </Radio>\r\n\r\n                                        <Input\r\n                                            type=\"number\"\r\n                                            size=\"sm\"\r\n                                            flexBasis=\"65%\"\r\n                                            value={startingType === RecurrenceStartingType.Year ? startingValue : \"\"}\r\n                                            onChange={handleStartingValueChange}\r\n                                            isDisabled={!recurring || startingType !== RecurrenceStartingType.Year}\r\n                                        />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack>\r\n\r\n                            <Stack isInline marginTop=\"1em\">\r\n                                <Text alignSelf=\"center\" flex=\"0 0 80px\" color={!recurring ? \"gray.300\" : undefined}>\r\n                                    until\r\n                                </Text>\r\n\r\n                                <Stack>\r\n                                    <Radio\r\n                                        isChecked={untilType === RecurrenceUntilType.Forever}\r\n                                        value={RecurrenceUntilType.Forever}\r\n                                        onChange={handleUntilTypeChange}\r\n                                        isDisabled={!recurring}\r\n                                    >\r\n                                        forever\r\n                                    </Radio>\r\n\r\n                                    <Radio\r\n                                        isChecked={untilType === RecurrenceUntilType.Goal}\r\n                                        value={RecurrenceUntilType.Goal}\r\n                                        onChange={handleUntilTypeChange}\r\n                                        isDisabled={!recurring}\r\n                                    >\r\n                                        goal reached\r\n                                    </Radio>\r\n\r\n                                    <Stack isInline>\r\n                                        <Radio\r\n                                            isChecked={untilType === RecurrenceUntilType.Year}\r\n                                            value={RecurrenceUntilType.Year}\r\n                                            onChange={handleUntilTypeChange}\r\n                                            isDisabled={!recurring}\r\n                                            flexShrink={0}\r\n                                            flexBasis=\"35%\"\r\n                                        >\r\n                                            year\r\n                                        </Radio>\r\n\r\n                                        <Input\r\n                                            type=\"number\"\r\n                                            size=\"sm\"\r\n                                            flexBasis=\"65%\"\r\n                                            value={untilValue}\r\n                                            onChange={handleUntilYearChange}\r\n                                            isDisabled={!recurring || untilType !== RecurrenceUntilType.Year}\r\n                                        />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack>\r\n                        </Stack>\r\n                    </Stack>\r\n                </FormControl>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n                <Button onClick={onCancel} marginRight=\"10px\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={handleSave} variantColor=\"blue\">\r\n                    Save\r\n                </Button>\r\n            </ModalFooter>\r\n        </ModalContent>\r\n    );\r\n};\r\n\r\nexport default EditCashFlowDialog;\r\n","import { FiltersValues, CashFlow } from \"models\";\r\n\r\nexport const removeFromList = <T>(list: T[], item: T): T[] => {\r\n    const index = list.indexOf(item);\r\n    if (index > -1) {\r\n        return [...list.slice(0, index), ...list.slice(index + 1)];\r\n    }\r\n    return list;\r\n};\r\n\r\nexport const saveToLocalStorage = (name: string, value: any) => {\r\n    localStorage.setItem(name, JSON.stringify(value));\r\n};\r\n\r\nexport const getFromLocalStorage = (name: string): unknown => {\r\n    const value = localStorage.getItem(name);\r\n\r\n    try {\r\n        return JSON.parse(value || \"\");\r\n    } catch (e) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nconst getDefaultStartingYear = (val?: number): number => val != null ? val : new Date().getFullYear();\r\nconst getDefaultAge = (val?: number): number => val != null ? val : 20;\r\nconst getDefaultInitialCapital = (val?: number): number => val != null ? val : 0;\r\nconst getDefaultAvgYearlyReturns = (val?: number): number => val != null ? val : 6;\r\nconst getDefaultWithdrawalRate = (val?: number): number => val != null ? val : 4;\r\nconst getDefaultRetirementIncomeTarget = (val?: number): number => val != null ? val : 40000;\r\nconst getDefaultIncomes = (val?: CashFlow[]): CashFlow[] => val || [];\r\nconst getDefaultSpendings = (val?: CashFlow[]): CashFlow[] => val || [];\r\n\r\nexport const getDefaultSettings = (): FiltersValues => {\r\n    const filters = getFromLocalStorage(\"filters\") as FiltersValues;\r\n\r\n    return {\r\n        startingYear: getDefaultStartingYear(filters.startingYear),\r\n        age: getDefaultAge(filters.age),\r\n        initialCapital: getDefaultInitialCapital(filters.initialCapital),\r\n        avgYearlyReturns: getDefaultAvgYearlyReturns(filters.avgYearlyReturns),\r\n        withdrawalRate: getDefaultWithdrawalRate(filters.withdrawalRate),\r\n        retirementIncomeTarget: getDefaultRetirementIncomeTarget(filters.retirementIncomeTarget),\r\n        incomes: getDefaultIncomes(filters.incomes),\r\n        spendings: getDefaultSpendings(filters.spendings),\r\n    };\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport {\r\n    Button,\r\n    InputGroup,\r\n    InputRightElement,\r\n    FormControl,\r\n    NumberInput,\r\n    NumberInputField,\r\n    NumberInputStepper,\r\n    NumberIncrementStepper,\r\n    NumberDecrementStepper,\r\n    FormLabel,\r\n    Input,\r\n    IconButton,\r\n    Stack,\r\n    Modal,\r\n    ModalOverlay,\r\n    useDisclosure,\r\n} from \"@chakra-ui/core\";\r\n\r\nimport { EditCashFlowDialog } from \"../EditCashFlowDialog/EditCashFlowDialog\";\r\nimport { FilterSection } from \"./FilterSection\";\r\nimport { removeFromList } from \"utils\";\r\nimport { CashFlowTable, Input as MyInput, Panel } from \"components\";\r\nimport { CashFlow, FiltersValues } from \"models\";\r\nimport { getDefaultSettings } from \"utils\";\r\n\r\nimport \"./FiltersBar.scss\";\r\n\r\ninterface FiltersBarProps {\r\n    defaultValues?: FiltersValues;\r\n    onChange: (filters: FiltersValues) => void;\r\n}\r\n\r\nexport const FiltersBar: React.FC<FiltersBarProps> = ({ defaultValues = getDefaultSettings(), onChange }) => {\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const [dialogTitle, setDialogTitle] = useState<string>(\"\");\r\n    const [activeCashFlow, setActiveCashFlow] = useState<CashFlow | undefined>();\r\n\r\n    // Misc\r\n    const [startingYear, setStartingYear] = useState<number>(defaultValues.startingYear);\r\n    const [age, setAge] = useState<number>(defaultValues.age);\r\n    const [initialCapital, setInitialCapital] = useState<number>(defaultValues.initialCapital);\r\n    const [avgYearlyReturns, setAvgYearlyReturns] = useState<number>(defaultValues.avgYearlyReturns);\r\n    const [retirementIncomeTarget, setRetirementIncomeTarget] = useState<number>(defaultValues.retirementIncomeTarget);\r\n    const [withdrawalRate, setWithdrawalRate] = useState<number>(defaultValues.withdrawalRate);\r\n\r\n    // Incomes\r\n    const [incomes, setIncomes] = useState<CashFlow[]>(() =>\r\n        defaultValues.incomes.map((income) => {\r\n            if (!income.id) {\r\n                income.id = uuidv4();\r\n            }\r\n            return income;\r\n        })\r\n    );\r\n\r\n    // Spendings\r\n    const [spendings, setSpendings] = useState<CashFlow[]>(() =>\r\n        defaultValues.spendings.map((spending) => {\r\n            if (!spending.id) {\r\n                spending.id = uuidv4();\r\n            }\r\n            return spending;\r\n        })\r\n    );\r\n\r\n    const handleAddIncome = () => {\r\n        setDialogTitle(\"Add Income\");\r\n        onOpen();\r\n    };\r\n\r\n    const handleAddSpending = () => {\r\n        setDialogTitle(\"Add Spending\");\r\n        onOpen();\r\n    };\r\n\r\n    const handleDeleteIncome = (cashFlow: CashFlow) => {\r\n        setIncomes(removeFromList(incomes, cashFlow));\r\n    };\r\n\r\n    const handleDeleteSpending = (cashFlow: CashFlow) => {\r\n        setSpendings(removeFromList(spendings, cashFlow));\r\n    };\r\n\r\n    const handleEditIncome = (cashFlow: CashFlow) => {\r\n        setActiveCashFlow(cashFlow);\r\n        setDialogTitle(\"Edit Income\");\r\n        onOpen();\r\n    };\r\n\r\n    const handleEditSpending = (cashFlow: CashFlow) => {\r\n        setActiveCashFlow(cashFlow);\r\n        setDialogTitle(\"Edit Spending\");\r\n        onOpen();\r\n    };\r\n\r\n    const updateCashFlow = (target: CashFlow[], cashFlow: CashFlow): CashFlow[] => {\r\n        const index = target.findIndex((item) => item.id === cashFlow.id);\r\n\r\n        if (index > -1) {\r\n            // Update\r\n            const newCashFlows = [...target];\r\n            newCashFlows[index] = { ...cashFlow };\r\n\r\n            return newCashFlows;\r\n        } else {\r\n            // Create\r\n            return [...target, cashFlow];\r\n        }\r\n    };\r\n\r\n    const handleDialogSave = (cashFlow: CashFlow) => {\r\n        if (!cashFlow.id) {\r\n            cashFlow = { ...cashFlow, id: uuidv4() };\r\n        }\r\n\r\n        // this is sketchy, find a better way\r\n        if ((activeCashFlow && dialogTitle === \"Edit Income\") || dialogTitle === \"Add Income\") {\r\n            setIncomes(updateCashFlow(incomes, cashFlow));\r\n            setActiveCashFlow(undefined);\r\n        } else if ((activeCashFlow && dialogTitle === \"Edit Spending\") || dialogTitle === \"Add Spending\") {\r\n            setSpendings(updateCashFlow(spendings, cashFlow));\r\n            setActiveCashFlow(undefined);\r\n        }\r\n\r\n        onClose();\r\n    };\r\n\r\n    useEffect(() => {\r\n        onChange({\r\n            startingYear,\r\n            age,\r\n            initialCapital,\r\n            avgYearlyReturns,\r\n            withdrawalRate,\r\n            retirementIncomeTarget,\r\n            incomes,\r\n            spendings,\r\n        });\r\n    }, [\r\n        startingYear,\r\n        age,\r\n        initialCapital,\r\n        avgYearlyReturns,\r\n        withdrawalRate,\r\n        retirementIncomeTarget,\r\n        incomes,\r\n        spendings,\r\n        onChange,\r\n    ]);\r\n\r\n    return (\r\n        <Stack className=\"filters-bar\" flexBasis=\"450px\">\r\n            <Modal isOpen={isOpen} closeOnOverlayClick={false} onClose={onClose}>\r\n                <ModalOverlay />\r\n                <EditCashFlowDialog\r\n                    title={dialogTitle}\r\n                    cashFlow={activeCashFlow}\r\n                    onCancel={onClose}\r\n                    onSave={handleDialogSave}\r\n                />\r\n            </Modal>\r\n\r\n            <Stack spacing={0}>\r\n                <Panel title=\"Misc\">\r\n                    <Stack direction=\"row\" spacing={0}>\r\n                        <Stack>\r\n                            <MyInput label=\"Starting Year\" />\r\n                        </Stack>\r\n                        <Stack>\r\n                            <MyInput label=\"Age\" />\r\n                        </Stack>\r\n                    </Stack>\r\n                    <Stack direction=\"row\" spacing={0}>\r\n                        <Stack>\r\n                            <MyInput label=\"Initial Capital ($)\" />\r\n                        </Stack>\r\n                        <Stack>\r\n                            <MyInput label=\"Avg Yearly Returns\" />\r\n                        </Stack>\r\n                    </Stack>\r\n                    <Stack direction=\"row\" spacing={0}>\r\n                        <Stack>\r\n                            <MyInput label=\"Withdrawal Rate (%)\" />\r\n                        </Stack>\r\n                        <Stack>\r\n                            <MyInput label=\"Retirement Income Target ($)\" />\r\n                        </Stack>\r\n                    </Stack>\r\n                </Panel>\r\n\r\n                <Panel title=\"Misc\">\r\n                    <Stack isInline>\r\n                        <FormControl flexBasis=\"50%\">\r\n                            <FormLabel htmlFor=\"startingYear\">Starting Year</FormLabel>\r\n\r\n                            <NumberInput\r\n                                size=\"sm\"\r\n                                min={1900}\r\n                                max={3000}\r\n                                defaultValue={startingYear}\r\n                                onChange={(value: React.ReactText) => setStartingYear(value as number)}\r\n                            >\r\n                                <NumberInputField id=\"startingYear\" />\r\n                                <NumberInputStepper>\r\n                                    <NumberIncrementStepper />\r\n                                    <NumberDecrementStepper />\r\n                                </NumberInputStepper>\r\n                            </NumberInput>\r\n                        </FormControl>\r\n\r\n                        <FormControl flexBasis=\"50%\">\r\n                            <FormLabel htmlFor=\"age\">Age</FormLabel>\r\n\r\n                            <NumberInput\r\n                                size=\"sm\"\r\n                                precision={0}\r\n                                defaultValue={age}\r\n                                onChange={(value: React.ReactText) => setAge(value as number)}\r\n                            >\r\n                                <NumberInputField id=\"age\" />\r\n                                <NumberInputStepper>\r\n                                    <NumberIncrementStepper />\r\n                                    <NumberDecrementStepper />\r\n                                </NumberInputStepper>\r\n                            </NumberInput>\r\n                        </FormControl>\r\n                    </Stack>\r\n\r\n                    <Stack isInline marginTop=\"15px\">\r\n                        <FormControl flexBasis=\"50%\">\r\n                            <FormLabel htmlFor=\"initialCapital\">Initial Capital ($)</FormLabel>\r\n\r\n                            <NumberInput\r\n                                size=\"sm\"\r\n                                step={1000}\r\n                                precision={0}\r\n                                defaultValue={initialCapital}\r\n                                onChange={(value: React.ReactText) => setInitialCapital(value as number)}\r\n                            >\r\n                                <NumberInputField id=\"initialCapital\" />\r\n                                <NumberInputStepper>\r\n                                    <NumberIncrementStepper />\r\n                                    <NumberDecrementStepper />\r\n                                </NumberInputStepper>\r\n                            </NumberInput>\r\n                        </FormControl>\r\n\r\n                        <FormControl flexBasis=\"50%\">\r\n                            <FormLabel htmlFor=\"avgYearlyReturns\">Avg Yearly Returns</FormLabel>\r\n                            <InputGroup size=\"sm\">\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    id=\"avgYearlyReturns\"\r\n                                    value={avgYearlyReturns}\r\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                                        setAvgYearlyReturns(parseInt(e.currentTarget.value))\r\n                                    }\r\n                                />\r\n                                <InputRightElement children=\"%\" color=\"gray.300\" />\r\n                            </InputGroup>\r\n                        </FormControl>\r\n                    </Stack>\r\n\r\n                    <Stack isInline>\r\n                        <FormControl flexBasis=\"50%\">\r\n                            <FormLabel htmlFor=\"withdrawalRate\">Withdrawal Rate (%)</FormLabel>\r\n\r\n                            <NumberInput\r\n                                min={0}\r\n                                step={0.1}\r\n                                defaultValue={withdrawalRate}\r\n                                onChange={(value: React.ReactText) => setWithdrawalRate(value as number)}\r\n                                size=\"sm\"\r\n                            >\r\n                                <NumberInputField id=\"withdrawalRate\" />\r\n                                <NumberInputStepper>\r\n                                    <NumberIncrementStepper />\r\n                                    <NumberDecrementStepper />\r\n                                </NumberInputStepper>\r\n                            </NumberInput>\r\n                        </FormControl>\r\n\r\n                        <FormControl flexBasis=\"50%\">\r\n                            <FormLabel htmlFor=\"retirementIncomeTarget\">Retirement Income Target ($)</FormLabel>\r\n                            <NumberInput\r\n                                min={0}\r\n                                step={5000}\r\n                                defaultValue={retirementIncomeTarget}\r\n                                onChange={(value: React.ReactText) => setRetirementIncomeTarget(value as number)}\r\n                                size=\"sm\"\r\n                            >\r\n                                <NumberInputField id=\"retirementIncomeTarget\" />\r\n                                <NumberInputStepper>\r\n                                    <NumberIncrementStepper />\r\n                                    <NumberDecrementStepper />\r\n                                </NumberInputStepper>\r\n                            </NumberInput>\r\n                        </FormControl>\r\n                    </Stack>\r\n                </Panel>\r\n\r\n                <Panel\r\n                    title=\"Incomes\"\r\n                    rightElement={\r\n                        <IconButton aria-label=\"Add Income\" icon=\"add\" variantColor=\"gray\" onClick={handleAddIncome} />\r\n                    }\r\n                >\r\n                    <Stack>\r\n                        <CashFlowTable items={incomes} onEdit={handleEditIncome} onDelete={handleDeleteIncome} />\r\n                    </Stack>\r\n                </Panel>\r\n\r\n                <Panel\r\n                    title=\"Spendings\"\r\n                    rightElement={\r\n                        <IconButton\r\n                            aria-label=\"Add Spending\"\r\n                            icon=\"add\"\r\n                            variantColor=\"gray\"\r\n                            onClick={handleAddSpending}\r\n                        />\r\n                    }\r\n                >\r\n                    <Stack>\r\n                        <CashFlowTable items={spendings} onEdit={handleEditSpending} onDelete={handleDeleteSpending} />\r\n                    </Stack>\r\n                </Panel>\r\n            </Stack>\r\n        </Stack>\r\n    );\r\n};\r\n","import React, { useState, useCallback } from \"react\";\r\nimport Currency from \"react-currency-formatter\";\r\nimport { ThemeProvider, Stack, theme, CSSReset } from \"@chakra-ui/core\";\r\n\r\nimport { SimpleTable, FiltersBar } from \"components\";\r\nimport { FiltersValues, CashFlow } from \"models\";\r\nimport { RecurrenceStartingType, RecurrenceUntilType, FrequencyScope } from \"values\";\r\nimport { getDefaultSettings, saveToLocalStorage } from \"utils\";\r\n\r\nimport \"./App.scss\";\r\n\r\ntype RowItem = {\r\n    year: number;\r\n    age?: number | undefined;\r\n    startOfYearCapital: number;\r\n    income: number;\r\n    spendings: number;\r\n    savings: number;\r\n    returns: number;\r\n    totalCapital: number;\r\n    retirementWithdrawal: number;\r\n    goalReached: boolean;\r\n};\r\n\r\ntype ColumnDefinition = {\r\n    title: string;\r\n    key: string;\r\n    getData: (row: RowItem, column: ColumnDefinition) => any;\r\n    condition?: (filters: FiltersValues) => boolean;\r\n    textAlign?: string;\r\n    cellHeaderClasses?: string;\r\n    cellClasses?: string;\r\n};\r\n\r\nconst columns: ColumnDefinition[] = [\r\n    {\r\n        title: \"Year\",\r\n        key: \"year\",\r\n        getData: (row: RowItem, col: ColumnDefinition) => row.year,\r\n        textAlign: \"center\",\r\n    },\r\n    {\r\n        title: \"Age\",\r\n        key: \"age\",\r\n        getData: (row: RowItem, col: ColumnDefinition) => row.age,\r\n        condition: (filters: FiltersValues): boolean => filters.age !== undefined,\r\n        textAlign: \"center\",\r\n    },\r\n    {\r\n        title: \"Start of Year\\nCapital\",\r\n        key: \"startingCapital\",\r\n        getData: (row: RowItem, col: ColumnDefinition) => (\r\n            <Currency quantity={row.startOfYearCapital} currency=\"CAD\" pattern=\"###,### !\" />\r\n        ),\r\n        textAlign: \"right\",\r\n    },\r\n    {\r\n        title: \"Retirement Withdrawal\",\r\n        key: \"retirementWithdrawal\",\r\n        getData: (row: RowItem, col: ColumnDefinition) => (\r\n            <Currency quantity={row.retirementWithdrawal} currency=\"CAD\" pattern=\"###,### !\" />\r\n        ),\r\n        textAlign: \"right\",\r\n    },\r\n    {\r\n        title: \"Income\",\r\n        key: \"income\",\r\n        getData: (row: RowItem, col: ColumnDefinition) => (\r\n            <Currency quantity={row.income} currency=\"CAD\" pattern=\"###,### !\" />\r\n        ),\r\n        textAlign: \"right\",\r\n        cellHeaderClasses: \"border-left\",\r\n        cellClasses: \"border-left\",\r\n    },\r\n    {\r\n        title: \"spendings\",\r\n        key: \"spendings\",\r\n        getData: (row: RowItem, col: ColumnDefinition) => (\r\n            <Currency quantity={row.spendings} currency=\"CAD\" pattern=\"###,### !\" />\r\n        ),\r\n        textAlign: \"right\",\r\n    },\r\n    {\r\n        title: \"Savings\",\r\n        key: \"Savings\",\r\n        getData: (row: RowItem, col: ColumnDefinition) => (\r\n            <Currency quantity={row.savings} currency=\"CAD\" pattern=\"###,### !\" />\r\n        ),\r\n        textAlign: \"right\",\r\n        cellHeaderClasses: \"border-right\",\r\n        cellClasses: \"border-right\",\r\n    },\r\n    {\r\n        title: \"Returns\",\r\n        key: \"returns\",\r\n        getData: (row: RowItem, col: ColumnDefinition) => (\r\n            <Currency quantity={row.returns} currency=\"CAD\" pattern=\"###,### !\" />\r\n        ),\r\n        textAlign: \"right\",\r\n    },\r\n    {\r\n        title: \"End of Year\\n Capital\",\r\n        key: \"totalCapital\",\r\n        getData: (row: RowItem, col: ColumnDefinition) => (\r\n            <Currency quantity={row.totalCapital} currency=\"CAD\" pattern=\"###,### !\" />\r\n        ),\r\n        textAlign: \"right\",\r\n    },\r\n];\r\n\r\nconst ROWS_TO_SHOW = 70;\r\n\r\nexport const App: React.FC = () => {\r\n    const [rows, setRows] = useState<RowItem[]>([]);\r\n    const [filters, setFilters] = useState<FiltersValues>(getDefaultSettings());\r\n\r\n    const calculateCashFlow = (year: number, age: number, cashFlows: CashFlow[], goalReached: boolean): number => {\r\n        let total = 0;\r\n\r\n        cashFlows.forEach((cashFlow) => {\r\n            if (cashFlow.recurring) {\r\n                const {\r\n                    frequency,\r\n                    frequencyScope,\r\n                    startingType,\r\n                    startingValue,\r\n                    untilType,\r\n                    untilValue,\r\n                } = cashFlow.recurringOptions!;\r\n\r\n                const started: boolean =\r\n                    {\r\n                        [RecurrenceStartingType.Now]: true,\r\n                        [RecurrenceStartingType.Goal]: goalReached,\r\n                        [RecurrenceStartingType.Age]: age >= startingValue!,\r\n                        [RecurrenceStartingType.Year]: year >= startingValue!,\r\n                    }[startingType] ?? false;\r\n\r\n                const expired: boolean =\r\n                    {\r\n                        [RecurrenceUntilType.Forever]: false,\r\n                        [RecurrenceUntilType.Goal]: goalReached,\r\n                        [RecurrenceUntilType.Age]: age > untilValue!,\r\n                        [RecurrenceUntilType.Year]: year > untilValue!,\r\n                    }[untilType] ?? true;\r\n\r\n                if (started && !expired) {\r\n                    // calc the total for the year\r\n                    total +=\r\n                        {\r\n                            [FrequencyScope.Day]: cashFlow.amount * (365 / frequency),\r\n                            [FrequencyScope.Week]: cashFlow.amount * (52 / frequency),\r\n                            [FrequencyScope.Month]: cashFlow.amount * (12 / frequency),\r\n                            [FrequencyScope.Year]: cashFlow.amount * (1 / frequency),\r\n                        }[frequencyScope] || 0;\r\n                }\r\n            } else if (year === cashFlow.fixedYear) {\r\n                total += cashFlow.amount;\r\n            }\r\n        });\r\n\r\n        return total;\r\n    };\r\n\r\n    const onFiltersChange = useCallback((filters: FiltersValues) => {\r\n        const rows: RowItem[] = [];\r\n\r\n        console.log(filters);\r\n\r\n        for (let i = 0; i < ROWS_TO_SHOW; i++) {\r\n            // Year\r\n            const year = filters.startingYear + i;\r\n\r\n            // Age\r\n            const age = filters.age + i;\r\n\r\n            // Capital at the start of the year\r\n            let startOfYearCapital = 0;\r\n            if (i === 0) {\r\n                startOfYearCapital = filters.initialCapital;\r\n            } else {\r\n                startOfYearCapital = rows[i - 1].totalCapital;\r\n            }\r\n\r\n            // Potential Withdrawal Rate at start of year\r\n            const retirementWithdrawal = startOfYearCapital * (filters.withdrawalRate / 100);\r\n            const goalReached = retirementWithdrawal >= filters.retirementIncomeTarget;\r\n\r\n            // Income for this year\r\n            const income = calculateCashFlow(year, age, filters.incomes, goalReached);\r\n\r\n            // Spendings for this year\r\n            const spendings = calculateCashFlow(year, age, filters.spendings, goalReached);\r\n\r\n            // Savings\r\n            const savings = income - spendings;\r\n\r\n            const totalCapitalBeforeReturns = startOfYearCapital + savings;\r\n\r\n            const returns = totalCapitalBeforeReturns * (filters.avgYearlyReturns / 100);\r\n\r\n            const endOfYearTotalCapital = totalCapitalBeforeReturns + returns;\r\n\r\n            const row: RowItem = {\r\n                year,\r\n                age,\r\n                startOfYearCapital,\r\n                income,\r\n                spendings,\r\n                savings,\r\n                returns,\r\n                totalCapital: endOfYearTotalCapital,\r\n                retirementWithdrawal,\r\n                goalReached,\r\n            };\r\n\r\n            rows.push(row);\r\n        }\r\n\r\n        saveToLocalStorage(\"filters\", filters);\r\n        setFilters(filters);\r\n        setRows(rows);\r\n    }, []);\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CSSReset />\r\n\r\n            <Stack isInline>\r\n                <FiltersBar defaultValues={filters} onChange={onFiltersChange} />\r\n\r\n                <Stack flex=\"1\">\r\n                    <SimpleTable className=\"the-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                {columns.map((col) => {\r\n                                    if (col.condition && !col.condition(filters)) {\r\n                                        return null;\r\n                                    }\r\n\r\n                                    return (\r\n                                        <th\r\n                                            key={`th-${col.key}`}\r\n                                            className={[\r\n                                                col.cellHeaderClasses,\r\n                                                col.textAlign ? `align-${col.textAlign}` : undefined,\r\n                                            ].join(\" \")}\r\n                                        >\r\n                                            {col.title.split(\"\\n\").map((letters, index) => (\r\n                                                <div key={index}>{letters}</div>\r\n                                            ))}\r\n                                        </th>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {rows.map((row) => {\r\n                                return (\r\n                                    <tr key={row.year} className={row.goalReached ? \"ready\" : undefined}>\r\n                                        {columns.map((col) => {\r\n                                            if (col.condition && !col.condition(filters)) {\r\n                                                return null;\r\n                                            }\r\n                                            return (\r\n                                                <td\r\n                                                    key={row.year + \"-\" + col.key}\r\n                                                    className={[\r\n                                                        col.cellClasses,\r\n                                                        col.textAlign ? `align-${col.textAlign}` : undefined,\r\n                                                    ].join(\" \")}\r\n                                                >\r\n                                                    {col.getData(row, col)}\r\n                                                </td>\r\n                                            );\r\n                                        })}\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </SimpleTable>\r\n                </Stack>\r\n            </Stack>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Stack, Icon } from \"@chakra-ui/core\";\r\n\r\nimport \"./Input.scss\";\r\n\r\ninterface InputProps {\r\n    label?: string;\r\n}\r\n\r\nexport const Input: React.FC<InputProps> = ({ label }) => {\r\n    const [value, setValue] = useState<string>(\"\");\r\n\r\n    return (\r\n        <div className=\"ui-input\">\r\n            <button onClick={() => setValue(\"\")}>\r\n                <Icon name=\"small-close\" />\r\n            </button>\r\n            <input type=\"text\" value={value} onChange={(e) => setValue(e.currentTarget.value)} />\r\n            {label && <label>{label}</label>}\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface PanelProps {\r\n    title?: string;\r\n    desc?: string;\r\n    rightElement?: JSX.Element;\r\n}\r\n\r\nexport const Panel: React.FC<PanelProps> = ({ children, title, desc, rightElement }) => {\r\n    return (\r\n        <div className=\"ui-panel\">\r\n            {(title || desc) && (\r\n                <header className=\"ui-panel-header\">\r\n                    <Stack direction=\"row\" justifyContent=\"space-between\">\r\n                        {title && <h3>{title}</h3>}\r\n                        {rightElement}\r\n                    </Stack>\r\n                    {desc && <h4>{desc}</h4>}\r\n                </header>\r\n            )}\r\n            <div className=\"ui-panel-body\">{children}</div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"components\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}